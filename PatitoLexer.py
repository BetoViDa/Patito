# Generated from D:/Mty/Compis/patito/PatitoLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,224,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,4,0,72,8,0,11,0,12,0,73,1,1,1,1,5,1,78,8,1,
        10,1,12,1,81,9,1,1,1,1,1,1,2,4,2,86,8,2,11,2,12,2,87,1,3,4,3,91,
        8,3,11,3,12,3,92,1,3,1,3,4,3,97,8,3,11,3,12,3,98,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,
        19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
        26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,
        31,1,32,1,32,1,33,4,33,219,8,33,11,33,12,33,220,1,33,1,33,1,79,0,
        34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,
        0,3,3,0,48,57,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,229,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,75,1,
        0,0,0,5,85,1,0,0,0,7,90,1,0,0,0,9,100,1,0,0,0,11,109,1,0,0,0,13,
        114,1,0,0,0,15,121,1,0,0,0,17,130,1,0,0,0,19,133,1,0,0,0,21,138,
        1,0,0,0,23,145,1,0,0,0,25,154,1,0,0,0,27,162,1,0,0,0,29,170,1,0,
        0,0,31,174,1,0,0,0,33,179,1,0,0,0,35,183,1,0,0,0,37,185,1,0,0,0,
        39,187,1,0,0,0,41,189,1,0,0,0,43,191,1,0,0,0,45,193,1,0,0,0,47,195,
        1,0,0,0,49,197,1,0,0,0,51,199,1,0,0,0,53,201,1,0,0,0,55,203,1,0,
        0,0,57,205,1,0,0,0,59,207,1,0,0,0,61,210,1,0,0,0,63,213,1,0,0,0,
        65,215,1,0,0,0,67,218,1,0,0,0,69,71,5,38,0,0,70,72,7,0,0,0,71,70,
        1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,2,1,0,0,0,75,
        79,5,34,0,0,76,78,9,0,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,80,1,0,
        0,0,79,77,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,5,34,0,0,83,
        4,1,0,0,0,84,86,7,1,0,0,85,84,1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,
        0,87,88,1,0,0,0,88,6,1,0,0,0,89,91,7,1,0,0,90,89,1,0,0,0,91,92,1,
        0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,94,1,0,0,0,94,96,5,46,0,0,95,
        97,7,1,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,
        0,99,8,1,0,0,0,100,101,5,112,0,0,101,102,5,114,0,0,102,103,5,111,
        0,0,103,104,5,103,0,0,104,105,5,114,0,0,105,106,5,97,0,0,106,107,
        5,109,0,0,107,108,5,97,0,0,108,10,1,0,0,0,109,110,5,110,0,0,110,
        111,5,117,0,0,111,112,5,108,0,0,112,113,5,97,0,0,113,12,1,0,0,0,
        114,115,5,105,0,0,115,116,5,110,0,0,116,117,5,105,0,0,117,118,5,
        99,0,0,118,119,5,105,0,0,119,120,5,111,0,0,120,14,1,0,0,0,121,122,
        5,109,0,0,122,123,5,105,0,0,123,124,5,101,0,0,124,125,5,110,0,0,
        125,126,5,116,0,0,126,127,5,114,0,0,127,128,5,97,0,0,128,129,5,115,
        0,0,129,16,1,0,0,0,130,131,5,115,0,0,131,132,5,105,0,0,132,18,1,
        0,0,0,133,134,5,115,0,0,134,135,5,105,0,0,135,136,5,110,0,0,136,
        137,5,111,0,0,137,20,1,0,0,0,138,139,5,101,0,0,139,140,5,110,0,0,
        140,141,5,116,0,0,141,142,5,101,0,0,142,143,5,114,0,0,143,144,5,
        111,0,0,144,22,1,0,0,0,145,146,5,102,0,0,146,147,5,108,0,0,147,148,
        5,111,0,0,148,149,5,116,0,0,149,150,5,97,0,0,150,151,5,110,0,0,151,
        152,5,116,0,0,152,153,5,101,0,0,153,24,1,0,0,0,154,155,5,101,0,0,
        155,156,5,115,0,0,156,157,5,99,0,0,157,158,5,114,0,0,158,159,5,105,
        0,0,159,160,5,98,0,0,160,161,5,101,0,0,161,26,1,0,0,0,162,163,5,
        105,0,0,163,164,5,109,0,0,164,165,5,112,0,0,165,166,5,114,0,0,166,
        167,5,105,0,0,167,168,5,109,0,0,168,169,5,101,0,0,169,28,1,0,0,0,
        170,171,5,102,0,0,171,172,5,105,0,0,172,173,5,110,0,0,173,30,1,0,
        0,0,174,175,5,118,0,0,175,176,5,97,0,0,176,177,5,114,0,0,177,178,
        5,115,0,0,178,32,1,0,0,0,179,180,5,104,0,0,180,181,5,97,0,0,181,
        182,5,122,0,0,182,34,1,0,0,0,183,184,5,40,0,0,184,36,1,0,0,0,185,
        186,5,41,0,0,186,38,1,0,0,0,187,188,5,123,0,0,188,40,1,0,0,0,189,
        190,5,125,0,0,190,42,1,0,0,0,191,192,5,44,0,0,192,44,1,0,0,0,193,
        194,5,59,0,0,194,46,1,0,0,0,195,196,5,58,0,0,196,48,1,0,0,0,197,
        198,5,43,0,0,198,50,1,0,0,0,199,200,5,45,0,0,200,52,1,0,0,0,201,
        202,5,42,0,0,202,54,1,0,0,0,203,204,5,47,0,0,204,56,1,0,0,0,205,
        206,5,61,0,0,206,58,1,0,0,0,207,208,5,33,0,0,208,209,5,61,0,0,209,
        60,1,0,0,0,210,211,5,61,0,0,211,212,5,61,0,0,212,62,1,0,0,0,213,
        214,5,60,0,0,214,64,1,0,0,0,215,216,5,62,0,0,216,66,1,0,0,0,217,
        219,7,2,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,
        221,1,0,0,0,221,222,1,0,0,0,222,223,6,33,0,0,223,68,1,0,0,0,7,0,
        73,79,87,92,98,220,1,6,0,0
    ]

class PatitoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    CTE_LETRERO = 2
    CTE_ENTERO = 3
    CTE_FLOTANTE = 4
    PROGRAM = 5
    NULA = 6
    INICIO = 7
    MIENTRAS = 8
    SI = 9
    SINO = 10
    ENTERO = 11
    FLOTANTE = 12
    ESCRIBE = 13
    IMPRIME = 14
    FIN = 15
    VARS = 16
    HAZ = 17
    LPAREN = 18
    RPAREN = 19
    LBRACE = 20
    RBRACE = 21
    COMMA = 22
    SEMI = 23
    COLON = 24
    PLUS = 25
    MINUS = 26
    MUL = 27
    DIV = 28
    EQUAL = 29
    NEQ = 30
    DEQ = 31
    LT = 32
    GT = 33
    WS = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'programa'", "'nula'", "'inicio'", "'mientras'", "'si'", "'sino'", 
            "'entero'", "'flotante'", "'escribe'", "'imprime'", "'fin'", 
            "'vars'", "'haz'", "'('", "')'", "'{'", "'}'", "','", "';'", 
            "':'", "'+'", "'-'", "'*'", "'/'", "'='", "'!='", "'=='", "'<'", 
            "'>'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "CTE_LETRERO", "CTE_ENTERO", "CTE_FLOTANTE", "PROGRAM", 
            "NULA", "INICIO", "MIENTRAS", "SI", "SINO", "ENTERO", "FLOTANTE", 
            "ESCRIBE", "IMPRIME", "FIN", "VARS", "HAZ", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "COMMA", "SEMI", "COLON", "PLUS", "MINUS", 
            "MUL", "DIV", "EQUAL", "NEQ", "DEQ", "LT", "GT", "WS" ]

    ruleNames = [ "ID", "CTE_LETRERO", "CTE_ENTERO", "CTE_FLOTANTE", "PROGRAM", 
                  "NULA", "INICIO", "MIENTRAS", "SI", "SINO", "ENTERO", 
                  "FLOTANTE", "ESCRIBE", "IMPRIME", "FIN", "VARS", "HAZ", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", "SEMI", 
                  "COLON", "PLUS", "MINUS", "MUL", "DIV", "EQUAL", "NEQ", 
                  "DEQ", "LT", "GT", "WS" ]

    grammarFileName = "PatitoLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


